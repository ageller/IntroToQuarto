---
title: "Do Hershey's Stock Prices Increase Around Valentine's Day?"
author: "Aaron M. Geller"
date: "12/12/2023"
format:
    html:
        code-fold: true
        code-tools: true
---

## Import libraries in R and Python

```{r, setup}
#| label: r-imports
library(reticulate)

```

```{python, setup}
#| label: python-imports

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

```


## Use Python to load, prepare and visualize the data (in @fig-prep and @fig-bin)

```{python}
#| label: fig-prep
#| fig-cap: "Hershey's stock price over time"


# read in the data
df = pd.read_csv('HSY.csv') 

# convert the date
df['Date'] = pd.to_datetime(df['Date'])
df['fractional_year'] = df['Date'].dt.year + df['Date'].dt.dayofyear/365.25
df['year'] = df['Date'].dt.year
df['fraction_of_year'] = df['Date'].dt.dayofyear/365.25

# subtract off a the long-term bulk trend by calculating a moving average
df['close_rolling_120d_mean'] = df['Close'].rolling(window = 120).mean()
df['close_detrended'] = df['Close'] - df['close_rolling_120d_mean']

# normalize so that the value goes between zero and one
col = df.groupby(df['year'])['close_detrended']
df['normalized_detrended_close'] = (df['close_detrended'] - col.transform('min'))/(col.transform('max') - col.transform('min'))

# take only dates after 1980, since 1980 isn't a full year in this dataset
df = df.loc[df['year'] >= 1981]

# plot the result
f, ax = plt.subplots(2, 1, sharex = True)
ax[0].plot(df['fractional_year'], df['Close'], lw = 4, label = 'data', color = 'black')
ax[0].plot(df['fractional_year'], df['close_rolling_120d_mean'], label = 'rolling average', color = 'red')
ax[0].set_ylabel('Stock Price ($)')
ax[0].legend()

ax[1].plot(df['fractional_year'], df['close_detrended'], color = 'black')
ax[1].set_ylabel('Detrended Stock Price')
ax[1].set_xlabel('Date')

plt.subplots_adjust(hspace = 0)

# for RStudio you should include the line below (or you may not see the plot)
# plt.show()

```

```{python}
#| label: fig-bin
#| fig-cap: "Mean binned Hershey's stock price over one year periods"

# set some parameters

holiday = pd.Timestamp('2023-02-14') # Valentine's Day
holiday_frac = holiday.dayofyear/365.25
col = 'normalized_detrended_close'

# range to use for statistcal analysis
days_before = 15/365.25
days_after = 15/365.25  

# select data for a statistical test in R in the next cell
vals_before_holiday = df.loc[(df['fraction_of_year'] >= holiday_frac - days_before) & (df['fraction_of_year'] < holiday_frac)][col]
vals_after_holiday = df.loc[(df['fraction_of_year'] >= holiday_frac) & (df['fraction_of_year'] < holiday_frac + days_after)][col]

# bin the data for a visual inspection
tbins = np.linspace(0,1,50)
hval = np.zeros(len(tbins) - 1)
hval_err = np.zeros(len(tbins) - 1)
for i in range(len(tbins) - 1):
    vals = df.loc[(df['fraction_of_year'] >= tbins[i]) & (df['fraction_of_year'] < tbins[i+1])][col]
    hval[i] = np.mean(vals)
    hval_err[i] = np.std(vals)/len(vals)**0.5
tbins = tbins[0:-1] + np.diff(tbins)[0]

f, ax = plt.subplots()
ax.errorbar(tbins, hval, yerr = hval_err, marker = 'o', ls = 'none', color = 'black', capsize = 3, label = 'binned data')

ax.axvline(x = holiday_frac, color = 'red', label = 'holiday date range')
ax.axvline(x = holiday_frac - days_before, color = 'red', ls = 'dashed')
ax.axvline(x = holiday_frac + days_after, color = 'red', ls = 'dashed')
ax.set_xlabel('Fraction of Year')
ax.set_ylabel('Normalized closing stock value (binned)')
ax.legend()

```

## Use R to perform a few statistical checks to see if the stock price increases after Valentine's Day


```{r}
#| label: r-stats
#| warning: false


ttest_result <- t.test(py$vals_before_holiday, py$vals_after_holiday)
kstest_result <- ks.test(py$vals_before_holiday, py$vals_after_holiday)

```

Statistical results:

* p-value for a 2-sample T-test on values before vs. after Valentine's Day : `r ttest_result$p.value`.
* p-value for a 2-sample K-S test  on values before vs. after Valentine's Day : `r kstest_result$p.value`.

